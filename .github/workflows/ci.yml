name: Test and Deploy on Raspberry PI 3B

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --memory=512m
          --health-cmd="pg_isready -U test_user -d test_db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install python-dotenv

      - name: Load environment variables
        run: |
          export $(grep -v '^#' .env | xargs)

      - name: Wait for PostgreSQL to be ready
        env:
          PGPASSWORD: test_password
        run: |
          echo "Waiting for PostgreSQL to be ready on localhost..."
          for i in {1..10}; do
            if psql -h 127.0.0.1 -U test_user -d test_db -c '\q' 2>/dev/null; then
              echo "PostgreSQL is ready!"
              break
            else
              echo "Waiting for PostgreSQL to be ready..."
              sleep 5
            fi
          done

      - name: Initialize the test database
        env:
          PGPASSWORD: test_password
        run: |
          echo "Creating table 'customers' in the test database"
          psql -h 127.0.0.1 -U test_user -d test_db -c "CREATE TABLE IF NOT EXISTS customers (customer_id SERIAL PRIMARY KEY, name VARCHAR(100), address VARCHAR(200));"

      - name: Run tests and generate report
        env:
            BASE_URL: ${{ secrets.BASE_URL }}
            DATABASE_URL: postgresql://test_user:test_password@127.0.0.1:5432/test_db
        run: |
          pytest tests --html=report.html --self-contained-html
      

      - name: Upload test report
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: report.html

  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Raspberry Pi
        run: |
          ssh -p 8022 -o StrictHostKeyChecking=no dgornostaev@178.218.58.175 << 'EOF'
            cd /home/dgornostaev/flask-rest-api-v1
            docker compose down
            docker compose up -d --build
          EOF
